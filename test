SET SERVEROUTPUT ON;

DECLARE
  v_json        CLOB;
  v_all_keys    SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
  v_key         VARCHAR2(4000);
  v_sql         CLOB := 'SELECT' || CHR(10);
  v_temp_keys   SYS.ODCIVARCHAR2LIST;
BEGIN
  -- Loop through all JSON rows to collect all unique keys
  FOR rec IN (SELECT json_data FROM your_table WHERE json_data IS NOT NULL) LOOP
    BEGIN
      -- Parse current JSON object
      FOR j IN (
        SELECT jt.*
        FROM JSON_TABLE(
          rec.json_data,
          '$' COLUMNS (
            NESTED PATH '$'
            COLUMNS (
              key_name VARCHAR2(4000) PATH 'key()'
            )
          )
        ) jt
      ) LOOP
        -- Check for uniqueness
        v_key := j.key_name;
        IF NOT v_all_keys.EXISTS(v_all_keys.COUNT + 1) THEN
          IF v_all_keys IS NULL OR NOT v_all_keys.exists(v_all_keys.FIRST) THEN
            v_all_keys.EXTEND;
            v_all_keys(v_all_keys.LAST) := v_key;
          ELSIF NOT v_all_keys.EXISTS(INDEX(v_all_keys, v_key)) THEN
            v_all_keys.EXTEND;
            v_all_keys(v_all_keys.LAST) := v_key;
          END IF;
        END IF;
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        NULL; -- skip malformed JSON
    END;
  END LOOP;

  -- Generate SELECT statement
  FOR i IN 1 .. v_all_keys.COUNT LOOP
    v_sql := v_sql || 
      '  JSON_VALUE(json_data, ''$.' || v_all_keys(i) || ''') AS "' || v_all_keys(i) || '"';
    IF i < v_all_keys.COUNT THEN
      v_sql := v_sql || ',' || CHR(10);
    END IF;
  END LOOP;

  v_sql := v_sql || CHR(10) || 'FROM your_table;';

  -- Print the final SQL
  DBMS_OUTPUT.PUT_LINE(v_sql);
END;
/


----

SET SERVEROUTPUT ON;
DECLARE
  v_json        CLOB;
  v_keys        DBMS_SQL.VARCHAR2_TABLE;
  v_key         VARCHAR2(4000);
  v_sql         CLOB := 'SELECT' || CHR(10);
  v_key_exists  BOOLEAN;
  idx           INTEGER := 0;
BEGIN
  -- Loop through all JSON rows
  FOR rec IN (SELECT EXU9XTB FROM ADI_POC WHERE EXU9XTB IS NOT NULL) LOOP
    v_json := rec.EXU9XTB;
    -- Extract keys using REGEXP
    FOR m IN (
      SELECT DISTINCT REGEXP_SUBSTR(v_json, '"([^"]+)":', 1, LEVEL, NULL, 1) AS key_name
      FROM dual
      CONNECT BY REGEXP_SUBSTR(v_json, '"([^"]+)":', 1, LEVEL) IS NOT NULL
    ) LOOP
      v_key_exists := FALSE;
      -- Check if key already exists
      FOR i IN 1 .. v_keys.COUNT LOOP
        IF v_keys(i) = m.key_name THEN
          v_key_exists := TRUE;
          EXIT;
        END IF;
      END LOOP;
      -- If not found, add it
      IF NOT v_key_exists THEN
        idx := idx + 1;
        v_keys(idx) := m.key_name;
      END IF;
    END LOOP;
  END LOOP;

  -- Generate SELECT clause dynamically
  FOR i IN 1 .. v_keys.COUNT LOOP
    v_sql := v_sql || 
      '  JSON_VALUE(EXU9XTB, ''$.' || v_keys(i) || ''') AS "' || v_keys(i) || '"';
    IF i < v_keys.COUNT THEN
      v_sql := v_sql || ',' || CHR(10);
    END IF;
  END LOOP;

  v_sql := v_sql || CHR(10) || 'FROM ADI_POC;';
  
  -- Output the SQL
  DBMS_OUTPUT.PUT_LINE(v_sql);
END;
/
